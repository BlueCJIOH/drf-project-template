services:
  web:
    container_name: "${PROJECT_NAME:-venue}-${ENVIRONMENT:-production}_web"
    platform: linux/amd64
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: runtime
    command: uv run --no-project gunicorn core.wsgi:application --bind 0.0.0.0:8080 --reload
    ports:
      - "8080:8080"
    volumes:
      - .:/app
      - static-data:/app/src/core/staticfiles
      - media-data:/app/src/media
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
    networks:
      - backend_network
      # - nginx_network  # uncomment if using nginx reverse proxy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/healthz/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    platform: linux/amd64
    container_name: "${PROJECT_NAME:-venue}-${ENVIRONMENT:-production}_redis"
    volumes:
      - redis-data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis123}
      - REDIS_PORT=${REDIS_PORT:-6379}
    command: [ "redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD:-redis123}" ]
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  default-worker:
    container_name: "${PROJECT_NAME:-venue}-${ENVIRONMENT:-production}_default_worker"
    platform: linux/amd64
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: runtime
    env_file:
      - .env
    tty: true
    entrypoint: ""
    command: celery -A core.celery worker -l INFO
    depends_on:
      redis:
        condition: service_healthy
      web:
        condition: service_healthy
    networks:
      - backend_network
    restart: unless-stopped

  default-beat:
    container_name: "${PROJECT_NAME:-venue}-${ENVIRONMENT:-production}_default_beat"
    platform: linux/amd64
    build:
      context: .
      dockerfile: Dockerfile.dev
      target: runtime
    env_file:
      - .env
    tty: true
    entrypoint: ""
    command: celery -A core.celery beat -l INFO --scheduler celery.beat:PersistentScheduler --schedule /app/celery/celerybeat-schedule
    volumes:
      - celery-beat-data:/app/celery
    depends_on:
      redis:
        condition: service_healthy
      web:
        condition: service_healthy
    networks:
      - backend_network
    restart: unless-stopped

  db:
    image: postgres:16.4-alpine
    platform: linux/amd64
    container_name: "${PROJECT_NAME:-venue}-${ENVIRONMENT:-production}_db"
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-venue}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-venue123}
      - POSTGRES_DB=${POSTGRES_DB:-venue}
      - POSTGRES_HOST=${POSTGRES_HOST:-db}
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-venue}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend_network
    restart: unless-stopped

volumes:
  db-data:
    name: "${PROJECT_NAME:-venue}-${ENVIRONMENT:-production}_db-data"
  static-data:
    name: "${PROJECT_NAME:-venue}-${ENVIRONMENT:-production}_staticfiles"
    # external: true  # uncomment if using external volume
  media-data:
    name: "${PROJECT_NAME:-venue}-${ENVIRONMENT:-production}_media"
    # external: true  # uncomment if using external volume
  redis-data:
    name: "${PROJECT_NAME:-venue}-${ENVIRONMENT:-production}_redis-data"
  celery-beat-data:
    name: "${PROJECT_NAME:-venue}-${ENVIRONMENT:-production}_celery-beat-data"

networks:
  backend_network:
    name: "${PROJECT_NAME:-venue}-${ENVIRONMENT:-production}_backend_network"
    driver: bridge
  # nginx_network:  # uncomment if using nginx reverse proxy
  #   name: "nginx_network"
  #   external: true
